#+title: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el

* Window Management

** EXWM Configuration

We use the excellent [[https://github.com/ch11ng/exwm][EXWM]] module as the basis for our Emacs Desktop Environment.  The [[https://github.com/ch11ng/exwm/wiki][EXWM Wiki]] is a great place to find tips about how to configure everything!

*NOTE:* Make sure you've installed =nm-applet=, =pasystray= and =blueman= for the system tray apps to work!

#+begin_src emacs-lisp

    (defun efs/run-in-background (command)
      (let ((command-parts (split-string command "[ ]+")))
        (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

    (defun efs/set-wallpaper ()
      (interactive)
      ;; NOTE: You will need to update this to a valid background path!
      (start-process-shell-command
          "feh" nil  "feh --bg-scale /usr/share/backgrounds/matt-mcnulty-nyc-2nd-ave.jpg"))

    (defun efs/exwm-init-hook ()
      ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1)

      ;; Open eshell by default
      ;;(eshell)

      ;; Show battery status in the mode line
      ;;(display-battery-mode 1)

      ;; Show the time and date in modeline
      (setq display-time-day-and-date t)
      ;;(display-time-mode 1)
      ;; Also take a look at display-time-format and format-time-string

      ;; Start the Polybar panel
      (efs/start-panel)
      
      ;; Launch apps that will run in the background
      (efs/run-in-background "nm-applet")
      (efs/run-in-background "pasystray")
      (efs/run-in-background "blueman-applet"))

    (defun efs/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))

  (defun efs/exwm-update-title ()
      (pcase exwm-class-name
        ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

  (defun efs/configure-window-by-class ()
    (interactive)
    (pcase exwm-class-name
    ("Firefox" (exwm-workspace-move-window 2))
    ("Sol" (exwm-workspace-move-window 3))
    ("mpv" (exwm-floating-toggle-floating)
     (exwm-layout-toggle-mode-line))))

    (use-package exwm
      :config
      ;; Set the default number of workspaces
      (setq exwm-workspace-number 5)

      ;; When window "class" updates, use it to set the buffer name
      (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

      ;; When window title updates, use it to set the buffer name
      (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

      ;; Configure windows as they're created
      (add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)

      ;; When EXWM starts up, do some extra confifuration
      (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

      ;; Rebind CapsLock to Ctrl
      (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

      ;; Set the screen resolution (update this to be the correct resolution for your screen!)
      (require 'exwm-randr)
      (exwm-randr-enable)
      (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")
      ;;(start-process-shell-command "xrandr" nil "xrandr --output LVDS-1 --primary --mode 1024x768 --pos 0x0 --rotate normal --output VGA-1 --off --output HDMI-1 --off --output DP-1 --off") 
      ;; Set the wallpaper after changing the resolution
      (efs/set-wallpaper)

      ;; Load the system tray before exwm-init
      ;;(require 'exwm-systemtray)
      ;;(setq exwm-systemtray-height 32)
      ;;(exwm-systemtray-enable)

      ;; These keys should always pass through to Emacs
      (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j  ;; Buffer list
          ?\C-\ ))  ;; Ctrl+Space

      ;; Ctrl+Q will enable the next key to be sent directly
      (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

      ;; Set up global key bindings.  These always work, no matter the input state!
      ;; Keep in mind that changing this list after EXWM initializes has no effect.
      (setq exwm-input-global-keys
            `(
              ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
              ([?\s-r] . exwm-reset)

              ;; Move between windows
              ([s-left] . windmove-left)
              ([s-right] . windmove-right)
              ([s-up] . windmove-up)
              ([s-down] . windmove-down)

              ;; Launch applications via shell command
              ([?\s-&] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))

              ;; Switch workspace
              ([?\s-w] . exwm-workspace-switch)
              ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

              ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
              ,@(mapcar (lambda (i)
                          `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                              (interactive)
                              (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))

      (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

      (exwm-enable))

#+end_src

* Desktop Environment

** Desktop Key Bindings

We use the [[https://github.com/DamienCassou/desktop-environment][desktop-environment]] package to automatically bind to well-known programs for controlling the volume, screen brightness, media playback, and doing other things like locking the screen and taking screenshots.  Make sure that you install the necessary programs to make this functionality work!  Check the [[https://github.com/DamienCassou/desktop-environment#default-configuration][default programs]] list to know what you need to install.

#+begin_src emacs-lisp

  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

** Desktop File

This file is used by your "login manager" (GDM, LightDM, etc) to display EXWM as a desktop environment option when you log in.

*IMPORTANT*: Make sure you create a symbolic link for this file into =/usr/share/xsessions=:

#+begin_src sh :tangle no

sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop

#+end_src

#+begin_src shell :tangle ./exwm/EXWM.desktop :mkdirp yes

  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/daviwil/.emacs.d/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm

#+end_src

** Launcher Script

This launcher script is invoked by =EXWM.desktop= to start Emacs and load our desktop environment configuration.  We also start up some other helpful applications to configure the desktop experience.

#+begin_src shell :tangle ./exwm/start-exwm.sh :shebang #!/bin/sh

  # Set the screen DPI (uncomment this if needed!)
   xrdb ~/.emacs.d/exwm/Xresources

  # Run the screen compositor
  compton &

  # Enable screen locking on suspend
  xss-lock -- slock &

  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el

#+end_src

** Keyboard Configuration

The =Xmodmap= file will be used with the =xmodmap= program to remap CapsLock to Ctrl inside of our desktop environment:

#+begin_src sh :tangle ./exwm/Xmodmap

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R

#+end_src

** DPI configuration

The =Xresources= file will be used with =xrdb= in =start-exwm.sh= to set our screen DPI:

#+begin_src conf :tangle ./exwm/Xresources

  Xft.dpi:   65   # Set this to your desired DPI!  Larger number means bigger text and UI

#+end_src

** Panel with Polybar
#+begin_src emacs-lisp
        ;; Make sure the server is started (better to do this in your main Emacs config!)
        (server-start)

          (defvar efs/polybar-process nil
            "Holds the process of the running Polybar instance, if any")

          (defun efs/kill-panel ()
            (interactive)
            (when efs/polybar-process
              (ignore-errors
                (kill-process efs/polybar-process)))
            (setq efs/polybar-process nil))

          (defun efs/start-panel ()
            (interactive)
            (efs/kill-panel)
            (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun efs/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun efs/send-polybar-exwm-workspace ()
    (efs/send-polybar-hook "exwm-workspace" 1))

    (defun efs/polybar-exwm-workspace ()
        (pcase exwm-workspace-current-index
          (0 "")
          (1 "")
          (2 "")
          (3 "")
          (4 "")))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)

      #+end_src

#+begin_src emacs-lisp :tangle ~/.config/polybar/config
      ; Docs: https://github.com/polybar/polybar
    ;==========================================================

    [settings]
    screenchange-reload = true

    [global/wm]
    margin-top = 0
    margin-bottom = 0

    [colors]
    background = #f0232635
    background-alt = #576075
    foreground = #A6Accd
    foreground-alt = #555
    primary = #ffb52a
    secondary = #e60053
    alert = #bd2c40
    underline-1 = #c792ea

    [bar/panel]
    width = 100%
    height = 20 
    offset-x = 0
    offset-y = 0
    fixed-center = true
    enable-ipc = true

    background = ${colors.background}
    foreground = ${colors.foreground}

    line-size = 2
    line-color = #f00

    border-size = 0
    border-color = #00000000

    padding-top = 5
    padding-left = 1
    padding-right = 1

    module-margin = 1

    font-0 = "Cantarell:size=12:weight=bold;2"
    font-1 = "Font Awesome:size=10;2"
    font-2 = "Material Icons:size=12;5"
    font-3 = "Fira Mono:size=10;-3"

    modules-right = cpu temperature battery date pulseaudio

    tray-position = right
    tray-padding = 2
    tray-maxsize = 28

    cursor-click = pointer
    cursor-scroll = ns-resize

  modules-left = exwm-workspace

  [module/pulseaudio]
type = internal/pulseaudio

; Sink to be used, if it exists (find using `pacmd list-sinks`, name field)
; If not, uses default sink
sink = alsa_output.pci-0000_12_00.3.analog-stereo

; Use PA_VOLUME_UI_MAX (~153%) if true, or PA_VOLUME_NORM (100%) if false
; Default: true
use-ui-max = true

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(efs/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.underline-1}
  format-padding = 1

    [module/cpu]
    type = internal/cpu
    interval = 2
    format = <label> <ramp-coreload>
    format-underline = ${colors.underline-1}
    click-left = emacsclient -e "(proced)"
    label = %percentage:2%%
    ramp-coreload-spacing = 0
    ramp-coreload-0 = ▁
    ramp-coreload-0-foreground = ${colors.foreground-alt}
    ramp-coreload-1 = ▂
    ramp-coreload-2 = ▃
    ramp-coreload-3 = ▄
    ramp-coreload-4 = ▅
    ramp-coreload-5 = ▆
    ramp-coreload-6 = ▇

    [module/date]
    type = internal/date
    interval = 5

    date = "%a %b %e"
    date-alt = "%A %B %d %Y"

    time = %l:%M %p
    time-alt = %H:%M:%S

    format-prefix-foreground = ${colors.foreground-alt}
    format-underline = ${colors.underline-1}

    label = %date% %time%

    [module/battery]
    type = internal/battery
    battery = BAT0
    adapter = ADP1
    full-at = 98
    time-format = %-l:%M

    label-charging = %percentage%% / %time%
    format-charging = <animation-charging> <label-charging>
    format-charging-underline = ${colors.underline-1}

    label-discharging = %percentage%% / %time%
    format-discharging = <ramp-capacity> <label-discharging>
    format-discharging-underline = ${self.format-charging-underline}

    format-full = <ramp-capacity> <label-full>
    format-full-underline = ${self.format-charging-underline}

    ramp-capacity-0 = 
    ramp-capacity-1 = 
    ramp-capacity-2 = 
    ramp-capacity-3 = 
    ramp-capacity-4 = 

    animation-charging-0 = 
    animation-charging-1 = 
    animation-charging-2 = 
    animation-charging-3 = 
    animation-charging-4 = 
    animation-charging-framerate = 750

    [module/temperature]
    type = internal/temperature
    thermal-zone = 0
    warn-temperature = 60

    format = <label>
    format-underline = ${colors.underline-1}
    format-warn = <label-warn>
    format-warn-underline = ${self.format-underline}

    label = %temperature-c%
    label-warn = %temperature-c%!
    label-warn-foreground = ${colors.secondary}
#+end_src
